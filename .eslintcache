[{"/home/shikhar/Files/React/confusion/src/redux/ActionTypes.js":"1","/home/shikhar/Files/React/confusion/src/redux/ActionCreators.js":"2","/home/shikhar/Files/React/confusion/src/redux/leaders.js":"3","/home/shikhar/Files/React/confusion/src/components/MainComponent.js":"4","/home/shikhar/Files/React/confusion/src/components/HomeComponent.js":"5","/home/shikhar/Files/React/confusion/src/components/AboutComponent.js":"6","/home/shikhar/Files/React/confusion/src/components/ContactComponent.js":"7","/home/shikhar/Files/React/confusion/src/App.js":"8","/home/shikhar/Files/React/confusion/src/components/FooterComponent.js":"9","/home/shikhar/Files/React/confusion/src/redux/dishes.js":"10","/home/shikhar/Files/React/confusion/src/redux/forms.js":"11","/home/shikhar/Files/React/confusion/src/shared/baseUrl.js":"12","/home/shikhar/Files/React/confusion/src/reportWebVitals.js":"13","/home/shikhar/Files/React/confusion/src/components/HeaderComponent.js":"14","/home/shikhar/Files/React/confusion/src/redux/comments.js":"15","/home/shikhar/Files/React/confusion/src/components/MenuComponent.js":"16","/home/shikhar/Files/React/confusion/src/redux/configureStore.js":"17","/home/shikhar/Files/React/confusion/src/redux/promotions.js":"18","/home/shikhar/Files/React/confusion/src/components/DishdetailComponent.js":"19","/home/shikhar/Files/React/confusion/src/components/LoadingComponent.js":"20"},{"size":588,"mtime":1610499195645,"results":"21","hashOfConfig":"22"},{"size":6759,"mtime":1610507508043,"results":"23","hashOfConfig":"22"},{"size":604,"mtime":1610491514882,"results":"24","hashOfConfig":"22"},{"size":4145,"mtime":1610500900108,"results":"25","hashOfConfig":"22"},{"size":1936,"mtime":1610494137800,"results":"26","hashOfConfig":"22"},{"size":5923,"mtime":1610508004637,"results":"27","hashOfConfig":"22"},{"size":10777,"mtime":1610501023350,"results":"28","hashOfConfig":"22"},{"size":620,"mtime":1609801673117,"results":"29","hashOfConfig":"22"},{"size":2586,"mtime":1609626440662,"results":"30","hashOfConfig":"22"},{"size":585,"mtime":1610381229663,"results":"31","hashOfConfig":"22"},{"size":163,"mtime":1610313730206,"results":"32","hashOfConfig":"22"},{"size":49,"mtime":1610382640457,"results":"33","hashOfConfig":"22"},{"size":362,"mtime":1608449390902,"results":"34","hashOfConfig":"22"},{"size":5243,"mtime":1609765317502,"results":"35","hashOfConfig":"22"},{"size":583,"mtime":1610461133559,"results":"36","hashOfConfig":"22"},{"size":2204,"mtime":1610382170406,"results":"37","hashOfConfig":"22"},{"size":771,"mtime":1610313837115,"results":"38","hashOfConfig":"22"},{"size":615,"mtime":1610381595475,"results":"39","hashOfConfig":"22"},{"size":7721,"mtime":1610476109826,"results":"40","hashOfConfig":"22"},{"size":247,"mtime":1610311056357,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16egjji",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shikhar/Files/React/confusion/src/redux/ActionTypes.js",[],"/home/shikhar/Files/React/confusion/src/redux/ActionCreators.js",[],"/home/shikhar/Files/React/confusion/src/redux/leaders.js",[],["88","89"],"/home/shikhar/Files/React/confusion/src/components/MainComponent.js",["90"],"import React, { Component } from 'react';\nimport Home from \"./HomeComponent\";\nimport About from './AboutComponent';\nimport Menu from './MenuComponent';\nimport Contact from \"./ContactComponent\";\nimport DishDetail from './DishdetailComponent';\nimport Header from './HeaderComponent';\nimport Footer from \"./FooterComponent\";\nimport { Switch, Redirect , Route, withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { actions } from \"react-redux-form\";\nimport { postComment, fetchDishes, fetchComments, fetchPromos, fetchLeaders, postFeedback } from '../redux/ActionCreators';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\n\n\nconst mapStateToProps = state => {\n    return { \n        dishes: state.dishes,\n        comments: state.comments,\n        promotions: state.promotions,\n        leaders: state.leaders,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    postComment: (dishId, rating, author, comment) => dispatch(postComment(dishId, rating, author, comment)),\n    fetchDishes: () => { dispatch(fetchDishes())},\n    resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\n    fetchComments: () => dispatch(fetchComments()),\n    fetchPromos: () => dispatch(fetchPromos()),\n    fetchLeaders: () => dispatch(fetchLeaders()),\n    postFeedback: (feedback) => dispatch(postFeedback(feedback))\n});\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n    \n    }\n\n    componentDidMount() {\n        this.props.fetchDishes();\n        this.props.fetchComments();\n        this.props.fetchPromos();\n        this.props.fetchLeaders();\n    }\n\n    render() {\n\n        const HomePage = () => {\n            return (\n                <Home \n                    dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\n                    dishesLoading={this.props.dishes.isLoading}\n                    dishErrMess={this.props.dishes.errMess}\n                    promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\n                    promoLoading={this.props.promotions.isLoading}\n                    promoErrMess={this.props.promotions.errMess}\n                    leader={this.props.leaders.leaders.filter((leader) => leader.featured)[0]}\n                    leaderLoading={this.props.leaders.isLoading}\n                    leaderErrMess={this.props.leaders.errMess}\n                />\n            );\n        }\n\n        const DishWithId = ({match}) => {\n            return (\n                <DishDetail \n                    dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\n                    isLoading={this.props.dishes.isLoading}\n                    errMess={this.props.dishes.errMess}\n                    comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\n                    commentsErrMess={this.props.comments.errMess}\n                    postComment={this.props.postComment}\n                />\n            )\n        };\n\n        return (\n            <div>\n                <Header/>\n                <TransitionGroup>\n                    <CSSTransition key={this.props.location.key} classNames=\"page\" timeout={300}>\n                    <Switch location={this.props.location}>\n                        <Route path='/home' component={HomePage} />\n                        <Route exact path='/aboutus' component={() => <About leaders={this.props.leaders} />} />\n                        <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\n                        <Route path='/menu/:dishId' component={DishWithId} />\n                        <Route exact path='/contactus' component={() => <Contact postFeedback={this.props.postFeedback} resetFeedbackForm={this.props.resetFeedbackForm} />} />\n                        <Redirect to=\"/home\" />\n                    </Switch>\n                    </CSSTransition>\n                </TransitionGroup>\n                <Footer/>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));",["91","92"],"/home/shikhar/Files/React/confusion/src/components/HomeComponent.js",[],["93","94"],"/home/shikhar/Files/React/confusion/src/components/AboutComponent.js",[],"/home/shikhar/Files/React/confusion/src/components/ContactComponent.js",["95","96","97","98","99","100","101","102","103"],"import React, {Component} from 'react';\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Control, Form, Errors, actions } from \"react-redux-form\";\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\nconst isNumber = (val) => !isNaN(Number(val));\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\n\nclass Contact extends Component {\n    \n    constructor(props){\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    \n    \n    handleSubmit(values){\n        console.log(\"Here\", values);\n        // alert(\"Thank you for your Feedback! : \" + JSON.stringify(values));\n        this.props.postFeedback(values);\n        this.props.resetFeedbackForm();\n    }\n\n    render() {\n\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>Contact Us</h3>\n                        <hr />\n                    </div>                \n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                    <h3>Location Information</h3>\n                    </div>\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\n                            <h5>Our Address</h5>\n                            <address>\n                            121, Clear Water Bay Road<br />\n                            Clear Water Bay, Kowloon<br />\n                            HONG KONG<br />\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\n                            </address>\n                    </div>\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\n                        <h5>Map of our Location</h5>\n                    </div>\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\n                        <div className=\"btn-group\" role=\"group\">\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row row-content\">\n                    <div className=\"col-12\">\n                        <h3>Send us Your Feedback</h3>\n                    </div>\n                    <div className=\"col-12 col-md-9\">\n                        <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\n                                        placeholder=\"First Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".firstname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\n                                        placeholder=\"Last Name\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".lastname\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\n                                        placeholder=\"Tel. Number\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".telnum\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 numbers',\n                                            maxLength: 'Must be 15 numbers or less',\n                                            isNumber: 'Must be a number'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\n                                <Col md={10}>\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        validators={{\n                                            required, validEmail\n                                        }}\n                                         />\n                                    <Errors\n                                        className=\"text-danger\"\n                                        model=\".email\"\n                                        show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            validEmail: 'Invalid Email Address'\n                                        }}\n                                     />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size: 6, offset: 2}}>\n                                    <div className=\"form-check\">\n                                        <Label check>\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\n                                                className=\"form-check-input\"\n                                                 /> {' '}\n                                                <strong>May we contact you?</strong>\n                                        </Label>\n                                    </div>\n                                </Col>\n                                <Col md={{size: 3, offset: 1}}>\n                                    <Control.select model=\".contactType\" name=\"contactType\"\n                                        className=\"form-control\">\n                                        <option>Tel.</option>\n                                        <option>Email</option>\n                                    </Control.select>\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\n                                <Col md={10}>\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\n                                        rows=\"12\"\n                                        className=\"form-control\" />\n                                </Col>\n                            </Row>\n                            <Row className=\"form-group\">\n                                <Col md={{size:10, offset: 2}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                    Send Feedback\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </div>\n                </div>\n            </div>\n        )\n    };\n}\n\nexport default Contact;","/home/shikhar/Files/React/confusion/src/App.js",[],"/home/shikhar/Files/React/confusion/src/components/FooterComponent.js",[],"/home/shikhar/Files/React/confusion/src/redux/dishes.js",[],"/home/shikhar/Files/React/confusion/src/redux/forms.js",[],"/home/shikhar/Files/React/confusion/src/shared/baseUrl.js",[],"/home/shikhar/Files/React/confusion/src/reportWebVitals.js",[],"/home/shikhar/Files/React/confusion/src/components/HeaderComponent.js",[],"/home/shikhar/Files/React/confusion/src/redux/comments.js",[],"/home/shikhar/Files/React/confusion/src/components/MenuComponent.js",[],"/home/shikhar/Files/React/confusion/src/redux/configureStore.js",[],"/home/shikhar/Files/React/confusion/src/redux/promotions.js",[],"/home/shikhar/Files/React/confusion/src/components/DishdetailComponent.js",["104","105","106","107","108","109","110"],"import React, { Component } from \"react\";\nimport { Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, Row, Col , BreadcrumbItem, Modal, ModalBody, ModalHeader, Form, FormGroup, Input ,Button, Label } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { Control, LocalForm, Errors } from \"react-redux-form\";\nimport { Loading } from \"./LoadingComponent\";\nimport { baseUrl } from '../shared/baseUrl';\nimport { FadeTransform, Fade, Stagger } from 'react-animation-components';\n\nconst required = (val) => val && val.length;\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\nconst minLength = (len) => (val) => val && (val.length >= len);\n\nclass CommentForm extends Component {\n    \n    constructor(props){\n        super(props);\n\n        this.state = {\n            isModelOpen: false,\n        }\n    }\n\n    handleSubmit(values){\n        console.log(\"Here\", values);\n        this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);\n    }\n\n    toggleModal = () => {\n        this.setState({ isModalOpen: !this.state.isModalOpen });\n    }\n\n    render(){\n        return (\n            <>\n                <Button outline onClick={this.toggleModal}>\n                    <span className=\"fa fa-pencil fa-lg\"> </span> Submit Comment \n                </Button>\n                <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\n                    <ModalHeader toggle={this.toggleModal}> Submit Comment </ModalHeader>\n                    <ModalBody>\n                        <div className=\"container\">\n                            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"rating\" > Rating </Label>\n                                    <Control.select model=\".rating\" id=\"rating\" name=\"rating\" className=\"form-control\">\n                                        <option>1</option>\n                                        <option>2</option>\n                                        <option>3</option>\n                                        <option>4</option>\n                                        <option>5</option>\n                                    </Control.select>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"author\" > Your Name </Label>\n                                    <Control.text model=\".author\" id=\"author\" name=\"author\" className=\"form-control\" placeholder=\"Your Name\"\n                                        validators={{\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\n                                        }}\n                                    />\n                                    <Errors className=\"text-danger\" model=\".author\" show=\"touched\"\n                                        messages={{\n                                            required: 'Required',\n                                            minLength: 'Must be greater than 2 characters',\n                                            maxLength: 'Must be 15 characters or less'\n                                        }}\n                                     />\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Label htmlFor=\"comment\"> Comment </Label>\n                                    <Control.textarea model=\".comment\" id=\"comment\" rows=\"6\" name=\"comment\" className=\"form-control\"/>\n                                </Row>\n                                <Row className=\"form-group\">\n                                    <Button type=\"submit\" color=\"primary\"> Submit </Button>\n                                </Row>\n                            </LocalForm>\n                        </div>\n                    </ModalBody>\n                </Modal>\n            </> \n        )\n    }\n\n}\n\n    function RenderDish ({dish}) {\n        if(dish != null) {\n            return (\n                <div className=\"col-12 col-md-5 m-1\">\n                    <FadeTransform\n                        in\n                        transformProps={{\n                            exitTransform: 'scale(0.5) translateY(-50%)'\n                        }}>\n                        <Card>\n                            <CardImg top src={baseUrl + dish.image} alt={dish.name} />\n                            <CardBody>\n                                <CardTitle>{dish.name}</CardTitle>\n                                <CardText>{dish.description}</CardText>\n                            </CardBody>\n                        </Card>\n                    </FadeTransform>\n                </div>\n            )\n        }else{\n            return (\n                <div></div>\n            )\n        }\n    };\n    \n    function RenderComments ({comments, postComment, dishId}) {\n\n        if(comments != null){\n            return (\n                <div className=\"col-12 col-md-5 m-1\">\n                    <h4>Comments</h4>\n                    <ul className=\"list-unstyled\">\n                        <Stagger in>\n                            {comments.map((comment) => {\n                                return (\n                                    <Fade in>\n                                    <li key={comment.id}>\n                                    <p>{comment.comment}</p>\n                                    <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>\n                                    </li>\n                                    </Fade>\n                                );\n                            })}\n                        </Stagger>\n                    </ul>\n                    <CommentForm dishId={dishId} postComment={postComment}/>\n                </div>\n            );\n        }\n        else{\n            return(\n                <div></div>\n            );\n        }\n    };\n\n\n    const DishDetail = (props) => {\n        if(props.isLoading) {\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <Loading/>\n                    </div>\n                </div>\n            );\n        }else if(props.errMess){\n            return(\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <h4>{props.errMess}</h4>\n                    </div>\n                </div>\n            );\n        }else if(props.dish != null){\n            return (\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <Breadcrumb>\n                            <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\n                            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\n                        </Breadcrumb>\n                        <div className=\"col-12\">\n                            <h3>{props.dish.name}</h3>\n                            <hr />\n                        </div>                \n                    </div>\n                    <div className=\"row\">\n                        <RenderDish dish={props.dish}/>\n                        <RenderComments comments={props.comments}\n                            postComment={props.postComment}\n                            dishId={props.dish.id}\n                        />\n                        \n                    </div>\n                </div>\n            )\n        }else{\n            return (<div></div>)\n        }\n        \n    }\n\n\nexport default DishDetail;","/home/shikhar/Files/React/confusion/src/components/LoadingComponent.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":37,"column":5,"nodeType":"117","messageId":"118","endLine":40,"endColumn":6},{"ruleId":"111","replacedBy":"119"},{"ruleId":"113","replacedBy":"120"},{"ruleId":"111","replacedBy":"121"},{"ruleId":"113","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":4,"column":33,"nodeType":"125","messageId":"126","endLine":4,"endColumn":40},{"ruleId":"127","severity":1,"message":"128","line":63,"column":29,"nodeType":"129","endLine":63,"endColumn":71},{"ruleId":"130","severity":1,"message":"131","line":77,"column":37,"nodeType":"129","endLine":83,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":99,"column":37,"nodeType":"129","endLine":105,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":121,"column":37,"nodeType":"129","endLine":127,"endColumn":44},{"ruleId":"130","severity":1,"message":"131","line":144,"column":37,"nodeType":"129","endLine":150,"endColumn":44},{"ruleId":"130","severity":1,"message":"132","line":166,"column":45,"nodeType":"129","endLine":168,"endColumn":52},{"ruleId":"130","severity":1,"message":"133","line":174,"column":37,"nodeType":"129","endLine":175,"endColumn":66},{"ruleId":"130","severity":1,"message":"134","line":184,"column":37,"nodeType":"129","endLine":186,"endColumn":68},{"ruleId":"123","severity":1,"message":"135","line":2,"column":73,"nodeType":"125","messageId":"126","endLine":2,"endColumn":76},{"ruleId":"123","severity":1,"message":"136","line":2,"column":126,"nodeType":"125","messageId":"126","endLine":2,"endColumn":130},{"ruleId":"123","severity":1,"message":"137","line":2,"column":132,"nodeType":"125","messageId":"126","endLine":2,"endColumn":141},{"ruleId":"123","severity":1,"message":"138","line":2,"column":143,"nodeType":"125","messageId":"126","endLine":2,"endColumn":148},{"ruleId":"130","severity":1,"message":"133","line":45,"column":37,"nodeType":"129","endLine":45,"endColumn":120},{"ruleId":"130","severity":1,"message":"131","line":55,"column":37,"nodeType":"129","endLine":59,"endColumn":39},{"ruleId":"130","severity":1,"message":"134","line":70,"column":37,"nodeType":"129","endLine":70,"endColumn":135},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["139"],["140"],["139"],["140"],"no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'Col' is defined but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","no-global-assign","no-unsafe-negation"]